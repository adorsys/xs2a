{
  "info": {
    "_postman_id": "ca1efd41-ad6c-416e-9ff4-a07fdeef85bc",
    "name": "2_5 Payment Cancellation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "None",
      "item": [
        {
          "name": "1. Payment initiation request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Transcation status is RCVD\", () => {",
                  "    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
                  "});",
                  "",
                  "pm.test(\"Start authorisation link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    var expl = _links.startAuthorisationWithPsuAuthentication;",
                  "    var impl = _links.startAuthorisation;",
                  "  ",
                  "    if (expl === undefined && impl === undefined) {",
                  "       pm.expect().fail();",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});",
                  "",
                  "pm.test(\"Payment Id exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('paymentId');",
                  "});",
                  "",
                  "pm.test(\"Transaction Fee Indicator exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
                  "});",
                  "",
                  "pm.globals.set(\"payment_id\", jsonData.paymentId);",
                  "pm.globals.set(\"startAuthorisation\", jsonData.links.startAuthorisation);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
                "exec": [
                  "pm.globals.unset(\"payment_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"endToEndIdentification\": \"RI-1234567890\",\n\"debtorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"DE89370400440532013000\"\n },\n\"instructedAmount\": {\n  \"amount\": 1000,\n  \"currency\": \"EUR\"\n },\n\"creditorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"DE89370400440532013000\"\n },\n\"creditorAgent\": \"Some AGENT\",\n\"creditorName\": \"Telekom\",\n \"creditorAddress\": {\n  \"buildingNumber\": \"123-34\",\n  \"city\": \"Nürnberg\",\n  \"country\": \"49\",\n  \"postalCode\": 90431,\n  \"street\": \"Herrnstraße\"\n },\n \"remittanceInformationUnstructured\": \"Ref. Number TELEKOM-1222\"\n }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "{{payment_service}}",
                "{{payment_product}}"
              ]
            },
            "description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
          },
          "response": []
        },
        {
          "name": "2. Cancel payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b891d5cb-5fba-410f-9793-cc40df8bb179",
                "exec": [
                  "pm.test(\"Status code is 202\", function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transaction Status exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionStatus', 'ACTC');",
                  "});",
                  "",
                  "pm.test(\"Start authorisation link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    var expl = _links.startAuthorisationWithPsuAuthentication;",
                  "    var impl = _links.startAuthorisation;",
                  "  ",
                  "    if (expl === undefined && impl === undefined) {",
                  "       pm.expect().fail();",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {},
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Start cancellation authorisation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e454a71-e2cb-4276-8ffa-3afbf0638728",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "const authorisationId = jsonData.links.startAuthorisationWithPsuAuthentication.split('/').pop();",
                  "",
                  "pm.globals.set(\"authorisation_id\", authorisationId);",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Select scaStatus \", () => {",
                  "    pm.expect(jsonData).to.have.property('scaStatus');",
                  "    const scaStatus = jsonData.scaStatus;",
                  "    pm.expect(scaStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.test(\"Links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations"
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Update PSU Data for cancellation (password stage)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "548b34dc-4d7d-4eae-9857-6c7a289bbecc",
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Sca status is finalised', () => {",
                  "   pm.expect(jsonData.scaStatus).to.eql('finalised');",
                  "});",
                  "",
                  "pm.test(\"Select scaStatus link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
            },
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations",
                "{{authorisation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "5. Payment initiation status request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44164aa7-9d6b-4d33-8082-657e52e264b9",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transaction Status exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json, application/xml"
              },
              {
                "key": "Digest",
                "value": "{{Digest}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept",
                "value": "{{PSU-Accept}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Charset",
                "value": "{{PSU-Accept-Charset}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Encoding",
                "value": "{{PSU-Accept-Encoding}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Language",
                "value": "{{PSU-Accept-Language}}",
                "disabled": true
              },
              {
                "key": "PSU-Device-ID",
                "value": "{{PSU-Device-ID}}",
                "disabled": true
              },
              {
                "key": "PSU-Geo-Location",
                "value": "{{PSU-Geo-Location}}",
                "disabled": true
              },
              {
                "key": "PSU-Http-Method",
                "value": "{{PSU-Http-Method}}",
                "disabled": true
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{PSU-IP-Address}}",
                "disabled": true
              },
              {
                "key": "PSU-IP-Port",
                "value": "{{PSU-IP-Port}}",
                "disabled": true
              },
              {
                "key": "PSU-User-Agent",
                "value": "{{PSU-User-Agent}}",
                "disabled": true
              },
              {
                "key": "Signature",
                "value": "{{Signature}}",
                "disabled": true
              },
              {
                "key": "TPP-Signature-Certificate",
                "value": "{{TPP-Signature-Certificate}}",
                "disabled": true
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_id}}/status",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "{{payment_service}}",
                "{{payment_id}}",
                "status"
              ]
            },
            "description": "Check the transaction status of a payment initiation."
          },
          "response": []
        }
      ]
    },
    {
      "name": "One",
      "item": [
        {
          "name": "1. Payment initiation request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Transcation status is RCVD\", () => {",
                  "    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
                  "});",
                  "",
                  "pm.test(\"Start authorisation link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    var expl = _links.startAuthorisationWithPsuAuthentication;",
                  "    var impl = _links.startAuthorisation;",
                  "  ",
                  "    if (expl === undefined && impl === undefined) {",
                  "       pm.expect().fail();",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"Payment Id exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('paymentId');",
                  "});",
                  "",
                  "pm.test(\"Transaction Fee Indicator exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
                  "});",
                  "",
                  "pm.globals.set(\"payment_id\", jsonData.paymentId);",
                  "pm.globals.set(\"startAuthorisation\", jsonData.links.startAuthorisation);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
                "exec": [
                  "pm.globals.unset(\"payment_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"endToEndIdentification\": \"RI-1234567890\",\n\"debtorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"DE89370400440532013000\"\n },\n\"instructedAmount\": {\n  \"amount\": 1000,\n  \"currency\": \"EUR\"\n },\n\"creditorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"DE89370400440532013000\"\n },\n\"creditorAgent\": \"Some AGENT\",\n\"creditorName\": \"Telekom\",\n \"creditorAddress\": {\n  \"buildingNumber\": \"123-34\",\n  \"city\": \"Nürnberg\",\n  \"country\": \"49\",\n  \"postalCode\": 90431,\n  \"street\": \"Herrnstraße\"\n },\n \"remittanceInformationUnstructured\": \"Ref. Number TELEKOM-1222\"\n }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/payments/sepa-credit-transfers",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "payments",
                "sepa-credit-transfers"
              ]
            },
            "description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
          },
          "response": []
        },
        {
          "name": "2. Cancel payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56e8cdd1-748b-4146-adc7-20fff4f56a4f",
                "exec": [
                  "pm.test(\"Status code is 202\", function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transaction Status exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionStatus', 'ACTC');",
                  "});",
                  "",
                  "pm.test(\"Start authorisation link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    var expl = _links.startAuthorisationWithPsuAuthentication;",
                  "    var impl = _links.startAuthorisation;",
                  "  ",
                  "    if (expl === undefined && impl === undefined) {",
                  "       pm.expect().fail();",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Start cancellation authorisation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e454a71-e2cb-4276-8ffa-3afbf0638728",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "const authorisationId = jsonData.links.startAuthorisationWithPsuAuthentication.split('/').pop();",
                  "",
                  "pm.globals.set(\"authorisation_id\", authorisationId);",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Select scaStatus \", () => {",
                  "    pm.expect(jsonData).to.have.property('scaStatus');",
                  "    const scaStatus = jsonData.scaStatus;",
                  "    pm.expect(scaStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.test(\"Links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations"
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Update PSU Data for cancellation (password stage)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bfd94c0e-3389-45ef-97cd-c4ffc7223ae7",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Sca status is scaMethodSelected', () => {",
                  "   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
                  "});",
                  "",
                  "pm.test(\"Select authoriseTransaction method link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('authoriseTransaction');",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});",
                  "",
                  "pm.test(\"Select chosenScaMethod exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('chosenScaMethod');",
                  "    const chosenScaMethod = jsonData.chosenScaMethod;",
                  "    ",
                  "    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
                  "    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');",
                  "    ",
                  "    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
                  "    pm.expect(chosenScaMethod.authenticationMethodId).to.eql('sms');",
                  "});",
                  "",
                  "pm.test(\"Challenge data exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('challengeData');",
                  "    const challengeData = jsonData.challengeData;",
                  "    ",
                  "    pm.expect(challengeData).to.have.property('data');",
                  "    pm.expect(challengeData).to.have.property('imageLink');",
                  "    pm.expect(challengeData).to.have.property('otpMaxLength');",
                  "    pm.expect(challengeData).to.have.property('additionalInformation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
            },
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations",
                "{{authorisation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "5. Update PSU Data for cancellation (tan)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "09cd5e78-8a30-4b52-ae9d-144dee529dc5",
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Sca status is finalised', () => {",
                  "   pm.expect(jsonData.scaStatus).to.eql('finalised');",
                  "});",
                  "",
                  "pm.test(\"Select scaStatus link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"scaAuthenticationData\": \"yu9f8j\"\n}"
            },
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations",
                "{{authorisation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "6. Payment initiation status request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44164aa7-9d6b-4d33-8082-657e52e264b9",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transaction Status exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json, application/xml"
              },
              {
                "key": "Digest",
                "value": "{{Digest}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept",
                "value": "{{PSU-Accept}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Charset",
                "value": "{{PSU-Accept-Charset}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Encoding",
                "value": "{{PSU-Accept-Encoding}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Language",
                "value": "{{PSU-Accept-Language}}",
                "disabled": true
              },
              {
                "key": "PSU-Device-ID",
                "value": "{{PSU-Device-ID}}",
                "disabled": true
              },
              {
                "key": "PSU-Geo-Location",
                "value": "{{PSU-Geo-Location}}",
                "disabled": true
              },
              {
                "key": "PSU-Http-Method",
                "value": "{{PSU-Http-Method}}",
                "disabled": true
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{PSU-IP-Address}}",
                "disabled": true
              },
              {
                "key": "PSU-IP-Port",
                "value": "{{PSU-IP-Port}}",
                "disabled": true
              },
              {
                "key": "PSU-User-Agent",
                "value": "{{PSU-User-Agent}}",
                "disabled": true
              },
              {
                "key": "Signature",
                "value": "{{Signature}}",
                "disabled": true
              },
              {
                "key": "TPP-Signature-Certificate",
                "value": "{{TPP-Signature-Certificate}}",
                "disabled": true
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_id}}/status",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "{{payment_service}}",
                "{{payment_id}}",
                "status"
              ]
            },
            "description": "Check the transaction status of a payment initiation."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Multiple",
      "item": [
        {
          "name": "1. Payment initiation request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Transcation status is RCVD\", () => {",
                  "    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
                  "});",
                  "",
                  "pm.test(\"Start authorisation link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    var expl = _links.startAuthorisationWithPsuAuthentication;",
                  "    var impl = _links.startAuthorisation;",
                  "  ",
                  "    if (expl === undefined && impl === undefined) {",
                  "       pm.expect().fail();",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"Payment Id exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('paymentId');",
                  "});",
                  "",
                  "pm.test(\"Transaction Fee Indicator exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
                  "});",
                  "",
                  "pm.globals.set(\"payment_id\", jsonData.paymentId);",
                  "pm.globals.set(\"startAuthorisation\", jsonData.links.startAuthorisation);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
                "exec": [
                  "pm.globals.unset(\"payment_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"endToEndIdentification\": \"RI-1234567890\",\n\"debtorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"DE89370400440532013000\"\n },\n\"instructedAmount\": {\n  \"amount\": 1000,\n  \"currency\": \"EUR\"\n },\n\"creditorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"DE89370400440532013000\"\n },\n\"creditorAgent\": \"Some AGENT\",\n\"creditorName\": \"Telekom\",\n \"creditorAddress\": {\n  \"buildingNumber\": \"123-34\",\n  \"city\": \"Nürnberg\",\n  \"country\": \"49\",\n  \"postalCode\": 90431,\n  \"street\": \"Herrnstraße\"\n },\n \"remittanceInformationUnstructured\": \"Ref. Number TELEKOM-1222\"\n }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/payments/sepa-credit-transfers",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "payments",
                "sepa-credit-transfers"
              ]
            },
            "description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
          },
          "response": []
        },
        {
          "name": "2. Cancel payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8fbdf7b5-d69d-458e-ad0f-b7d67134ab03",
                "exec": [
                  "pm.test(\"Status code is 202\", function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transaction Status exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionStatus', 'ACTC');",
                  "});",
                  "",
                  "pm.test(\"Start authorisation link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    var expl = _links.startAuthorisationWithPsuAuthentication;",
                  "    var impl = _links.startAuthorisation;",
                  "  ",
                  "    if (expl === undefined && impl === undefined) {",
                  "       pm.expect().fail();",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Start cancellation authorisation",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e454a71-e2cb-4276-8ffa-3afbf0638728",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "const authorisationId = jsonData.links.startAuthorisationWithPsuAuthentication.split('/').pop();",
                  "",
                  "pm.globals.set(\"authorisation_id\", authorisationId);",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Select scaStatus \", () => {",
                  "    pm.expect(jsonData).to.have.property('scaStatus');",
                  "    const scaStatus = jsonData.scaStatus;",
                  "    pm.expect(scaStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.test(\"Links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations"
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Update PSU Data for cancellation (password stage)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2f55f61-07fe-471c-820c-c2c35ee6eda0",
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Sca status is psuAuthenticated', () => {",
                  "   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
                  "});",
                  "",
                  "pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
                  "});",
                  "",
                  "pm.test(\"scaMethods exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('scaMethods');",
                  "    const scaMethods = jsonData.scaMethods;",
                  "    ",
                  "    pm.expect(scaMethods.length).to.eql(2);",
                  "    ",
                  "    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
                  "    pm.expect(scaMethods[0].authenticationType).to.eql('SMS_OTP');",
                  "",
                  "    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
                  "    pm.expect(scaMethods[0].authenticationMethodId).to.eql('sms');",
                  "    ",
                  "    pm.expect(scaMethods[1]).to.have.property('authenticationType');",
                  "    pm.expect(scaMethods[1].authenticationType).to.eql('PUSH_OTP');",
                  "    ",
                  "    pm.expect(scaMethods[1]).to.have.property('authenticationMethodId');",
                  "    pm.expect(scaMethods[1].authenticationMethodId).to.eql('push');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
            },
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations",
                "{{authorisation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "5. Update PSU Data for cancellation (sca method)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2c2e514-8b43-4415-9ff4-6d38fa39d6f2",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Sca status is scaMethodSelected', () => {",
                  "   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
                  "});",
                  "",
                  "pm.test(\"Select authoriseTransaction method link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('authoriseTransaction');",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});",
                  "",
                  "pm.test(\"Select chosenScaMethod exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('chosenScaMethod');",
                  "    const chosenScaMethod = jsonData.chosenScaMethod;",
                  "    ",
                  "    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
                  "    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');",
                  "    ",
                  "    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
                  "    pm.expect(chosenScaMethod.authenticationMethodId).to.eql('sms');",
                  "});",
                  "",
                  "pm.test(\"Challenge data exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('challengeData');",
                  "    const challengeData = jsonData.challengeData;",
                  "    ",
                  "    pm.expect(challengeData).to.have.property('data');",
                  "    pm.expect(challengeData).to.have.property('imageLink');",
                  "    pm.expect(challengeData).to.have.property('otpMaxLength');",
                  "    pm.expect(challengeData).to.have.property('additionalInformation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"authenticationMethodId\": \"sms\"\n}"
            },
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations",
                "{{authorisation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "6. Update PSU Data for cancellation (tan)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "81df928f-81c5-41c2-8428-a1ccd9c5562b",
                "exec": [
                  "pm.test('Status code is 200', () => {",
                  "   pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Sca status is finalised', () => {",
                  "   pm.expect(jsonData.scaStatus).to.eql('finalised');",
                  "});",
                  "",
                  "pm.test(\"Select scaStatus link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"Select other links exist\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    ",
                  "    pm.expect(_links).to.have.property('status');",
                  "    pm.expect(_links).to.have.property('self');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple}}"
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{ip_address}}"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"scaAuthenticationData\": \"VJQIX7\"\n}"
            },
            "url": {
              "raw": "http://localhost:8080/v1/payments/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "8080",
              "path": [
                "v1",
                "payments",
                "{{payment_id}}",
                "cancellation-authorisations",
                "{{authorisation_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "7. Payment initiation status request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44164aa7-9d6b-4d33-8082-657e52e264b9",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Transaction Status exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json, application/xml"
              },
              {
                "key": "Digest",
                "value": "{{Digest}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept",
                "value": "{{PSU-Accept}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Charset",
                "value": "{{PSU-Accept-Charset}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Encoding",
                "value": "{{PSU-Accept-Encoding}}",
                "disabled": true
              },
              {
                "key": "PSU-Accept-Language",
                "value": "{{PSU-Accept-Language}}",
                "disabled": true
              },
              {
                "key": "PSU-Device-ID",
                "value": "{{PSU-Device-ID}}",
                "disabled": true
              },
              {
                "key": "PSU-Geo-Location",
                "value": "{{PSU-Geo-Location}}",
                "disabled": true
              },
              {
                "key": "PSU-Http-Method",
                "value": "{{PSU-Http-Method}}",
                "disabled": true
              },
              {
                "key": "PSU-IP-Address",
                "value": "{{PSU-IP-Address}}",
                "disabled": true
              },
              {
                "key": "PSU-IP-Port",
                "value": "{{PSU-IP-Port}}",
                "disabled": true
              },
              {
                "key": "PSU-User-Agent",
                "value": "{{PSU-User-Agent}}",
                "disabled": true
              },
              {
                "key": "Signature",
                "value": "{{Signature}}",
                "disabled": true
              },
              {
                "key": "TPP-Signature-Certificate",
                "value": "{{TPP-Signature-Certificate}}",
                "disabled": true
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_id}}/status",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "{{payment_service}}",
                "{{payment_id}}",
                "status"
              ]
            },
            "description": "Check the transaction status of a payment initiation."
          },
          "response": []
        }
      ]
    }
  ]
}
