{{- if .Values.keycloak.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "psd2.fullname" . }}-keycloak-init
  labels:
{{ include "psd2.labels" . | indent 4 }}
    app.kubernetes.io/component: keycloak-init
stringData:
  init.sh: |
    #!/usr/bin/env bash

    if ! timeout 60 sh -c "until printf '.' && timeout 1 sh -c 'cat < /dev/null > /dev/tcp/"$(echo "${KEYCLOAK_HOST##*/}" | tr ':' '/')"'; do sleep 2; done"; then
      echo "Can not reach ${KEYCLOAK_HOST}"
    fi

    echo

    {{- range $name, $config := .Values.keycloak.realms }}
    {{- if not (empty $config) }}
    REALM_NAME={{ $name | quote }}
    REALM='{
      "realm": "'${REALM_NAME}'",
      "enabled": {{ default "true" (toString $config.enabled) }},
      {{- if hasKey $config "verifyEmail" }}
      "verifyEmail": {{ $config.verifyEmail | quote }},
      {{- end }}
      {{- if hasKey $config "registrationEmailAsUsername" }}
      "registrationEmailAsUsername": {{ $config.registrationEmailAsUsername | quote }},
      {{- end }}
      {{- if hasKey $config "registrationAllowed" }}
      "registrationAllowed": {{ $config.registrationAllowed | quote }},
      {{- end }}
      {{- if hasKey $config "loginWithEmailAllowed" }}
      "loginWithEmailAllowed": {{ $config.loginWithEmailAllowed | quote }},
      {{- end }}
      {{- if not (empty $config.smtpServer) }}
      "smtpServer": {
        "host": {{ tpl $config.smtpServer.host $ | quote }},
        "from": {{ tpl $config.smtpServer.from $ | quote }}
      },
      {{- end }}
      "displayName": {{ default $name $config.displayName | quote }},
      "sslRequired": {{ default "external" $config.sslRequired | quote }}{{- with $config.clients }},
      "clients": [
      {{- $lastClientName := . | keys | sortAlpha | last }}
      {{- range $clientName, $clientConfig := . }}
        {
          "clientId": {{ $clientName | quote }},
          "name": {{ $clientName | quote }},
        {{- if hasKey $clientConfig "secret" }}
          "secret": {{ tpl $clientConfig.secret $ | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "standardFlowEnabled" }}
          "standardFlowEnabled": {{ $clientConfig.standardFlowEnabled | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "implicitFlowEnabled" }}
          "implicitFlowEnabled": {{ $clientConfig.implicitFlowEnabled | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "directAccessGrantsEnabled" }}
          "directAccessGrantsEnabled": {{ $clientConfig.directAccessGrantsEnabled | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "serviceAccountsEnabled" }}
          "serviceAccountsEnabled": {{ $clientConfig.serviceAccountsEnabled | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "authorizationServicesEnabled" }}
          "authorizationServicesEnabled": {{ $clientConfig.authorizationServicesEnabled | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "publicClient" }}
          "publicClient": {{ $clientConfig.publicClient | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "attributes" }}
          "attributes": {{ $clientConfig.attributes | toJson }},
          {{- end }}
          {{- if hasKey $clientConfig "authenticationFlowBindingOverrides" }}
          "authenticationFlowBindingOverrides": {{ $clientConfig.authenticationFlowBindingOverrides | toJson }},
          {{- end }}
          {{- if hasKey $clientConfig "fullScopeAllowed" }}
          "fullScopeAllowed": {{ $clientConfig.fullScopeAllowed | quote }},
          {{- end }}
          {{- if hasKey $clientConfig "nodeReRegistrationTimeout" }}
          "nodeReRegistrationTimeout": {{ $clientConfig.nodeReRegistrationTimeout | quote }},
          {{- end }}
          "enabled": {{ if hasKey $clientConfig "enabled" }}{{ $clientConfig.enabled | quote }}{{ else }}"true"{{ end }}
        }{{ if not (eq $lastClientName $clientName) }},{{ end }}
      {{- end }}
      ]
      {{- end }}{{- with $config.roles }},
      "roles": {
        "realm": [
        {{- $lastRoleName := . | keys | sortAlpha | last }}
        {{- range $roleName, $roleConfig := . }}
          {
            "name": {{ $roleName | quote }},
            "composite": {{ default "true" (toString $roleConfig.composite) }},
            "clientRole": {{ default "true" (toString $roleConfig.clientRole) }},
            "description": {{ $roleConfig.description | quote }}
          }{{ if not (eq $lastRoleName $roleName) }},{{ end }}
        {{- end }}
        ]
      }
      {{- end }}{{- with $config.users }},
      "users": [
      {{- $lastUserName := . | keys | sortAlpha | last }}
      {{- range $userName, $userConfig := . }}
        {
          "enabled": true,
          "username": {{ $userName | quote }},
          "firstName": {{ $userConfig.firstName | quote }},
          "lastName": {{ $userConfig.lastName | quote }},
          "email": {{ $userConfig.email | quote }},
          "emailVerified": {{ default "true" (toString $userConfig.emailVerified) }},
          "realmRoles": {{ if empty $userConfig.realmRoles }}[]{{ else }}{{ $userConfig.realmRoles | toJson }}{{ end }},
          "credentials": {{ tpl ($userConfig.credentials | toJson) $ }}
        }{{ if not (eq $lastUserName $userName) }},{{ end }}
      {{- end }}
      ]
      {{- end }}
    }'

    # https://www.keycloak.org/docs/1.9/server_development_guide/topics/admin-rest-api.html
    if ! TOKEN=$(curl -sSf -d "client_id=admin-cli" -d "username=${KEYCLOAK_USER}" -d "password=${KEYCLOAK_PASSWORD}" -d "grant_type=password" "${KEYCLOAK_HOST}/auth/realms/master/protocol/openid-connect/token" | python -c "import sys, json; print json.load(sys.stdin)['access_token']"); then
      echo "Error while getting admin token."
      echo "${TOKEN}"
      exit 1
    fi

    # https://www.keycloak.org/docs-api/3.0/rest-api/index.html
    if [ "404" == "$(curl -w "%{http_code}" -o /dev/null -sS -H "Authorization: Bearer ${TOKEN}" "${KEYCLOAK_HOST}/auth/admin/realms/${REALM_NAME}" --header "Content-Type: application/json")" ]; then
      if ! API_RETURN=$(curl -sSf -H "Authorization: Bearer ${TOKEN}" "${KEYCLOAK_HOST}/auth/admin/realms" --header "Content-Type: application/json" --data "${REALM}"); then
        echo "Error while create realm."
        echo "${API_RETURN}"
        exit 1
      fi
      echo "Creating ${REALM_NAME} was successful!"
    else
      if ! API_RETURN=$(curl -sSf -H "Authorization: Bearer ${TOKEN}" "${KEYCLOAK_HOST}/auth/admin/realms/${REALM_NAME}" --header "Content-Type: application/json" -XPUT --data "${REALM}"); then
        echo "Error while update realm."
        echo "${API_RETURN}"
        exit 1
      fi
      echo "Updating ${REALM_NAME} was successful!"
    fi

    {{- end }}
    {{- end }}
{{- end }}
